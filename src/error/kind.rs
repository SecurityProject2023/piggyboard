#[derive(Debug, Copy, Clone)]
pub enum PiggyErrorKind {
  Success,
  InvalidURL,
  InvalidIPAddr,
  InvalidEmail,
  InvalidUsername,
  InvalidPhone,
  EmailAlreadyInUse,
  UsernameAlreadyInUse,
  PhoneAlreadyInUse,
  UserNotFound,
  PostNotFound,
  PrivateAddressForbidden,
  PasswordIncorrect,
  PasswordIsSame,
  UserQueryRequired,
  CannotBlockYourself,
  AlreadyBlocked,
  CannotReportYourself,
  RecentReportFounded,
  FileTooLarge,
  MimeUnknown,
  MimeNotAllowed,
  PasswordHashCreateFailed,
  PasswordHashVerifyFailed,
  SearchNotFound,
  BlockNotFound,
  DieselError,
  ReqwestError,
  LettreError,
  EmailAddressError,
  SmtpTransportError,
  UnknownEmailContentType,
  CommentNotFound
}

impl ToString for PiggyErrorKind {
  fn to_string(&self) -> String {
    match self {
      PiggyErrorKind::Success => "SUCCESS".to_string(),
      PiggyErrorKind::InvalidURL => "INVALID_URL".to_string(),
      PiggyErrorKind::InvalidIPAddr => "INVALID_IPADDR".to_string(),
      PiggyErrorKind::InvalidEmail => "INVALID_EMAIL".to_string(),
      PiggyErrorKind::InvalidUsername => "INVALID_USERNAME".to_string(),
      PiggyErrorKind::InvalidPhone => "INVALID_PHONE".to_string(),
      PiggyErrorKind::EmailAlreadyInUse => "EMAIL_ALREADY_IN_USE".to_string(),
      PiggyErrorKind::UsernameAlreadyInUse => "USERNAME_ALREADY_IN_USE".to_string(),
      PiggyErrorKind::PhoneAlreadyInUse => "PHONE_ALREADY_IN_USE".to_string(),
      PiggyErrorKind::UserNotFound => "USER_NOT_FOUND".to_string(),
      PiggyErrorKind::PostNotFound => "POST_NOT_FOUND".to_string(),
      PiggyErrorKind::PrivateAddressForbidden => "PRIVATE_ADDRESS_FORBIDDEN".to_string(),
      PiggyErrorKind::PasswordIncorrect => "PASSWORD_INCORRECT".to_string(),
      PiggyErrorKind::PasswordIsSame => "PASSWORD_IS_SAME".to_string(),
      PiggyErrorKind::UserQueryRequired => "USER_QUERY_REQUIRED".to_string(),
      PiggyErrorKind::CannotBlockYourself => "CANNOT_BLOCK_YOURSELF".to_string(),
      PiggyErrorKind::AlreadyBlocked => "ALREADY_BLOCKED".to_string(),
      PiggyErrorKind::CannotReportYourself => "CANNOT_REPORT_YOURSELF".to_string(),
      PiggyErrorKind::RecentReportFounded => "RECENT_REPORT_FOUNDED".to_string(),
      PiggyErrorKind::FileTooLarge => "FILE_TOO_LARGE".to_string(),
      PiggyErrorKind::MimeUnknown => "MIME_UNKNOWN".to_string(),
      PiggyErrorKind::MimeNotAllowed => "MIME_NOT_ALLOWED".to_string(),
      PiggyErrorKind::PasswordHashCreateFailed => "PASSWORD_HASH_CREATE_FAILED".to_string(),
      PiggyErrorKind::PasswordHashVerifyFailed => "PASSWORD_HASH_VERIFY_FAILED".to_string(),
      PiggyErrorKind::SearchNotFound => "SEARCH_NOT_FOUND".to_string(),
      PiggyErrorKind::BlockNotFound => "BLOCK_NOT_FOUND".to_string(),
      PiggyErrorKind::DieselError => "DIESEL_ERROR".to_string(),
      PiggyErrorKind::ReqwestError => "REQWEST_ERROR".to_string(),
      PiggyErrorKind::LettreError => "LETTRE_ERROR".to_string(),
      PiggyErrorKind::EmailAddressError => "EMAIL_ADDRESS_ERROR".to_string(),
      PiggyErrorKind::SmtpTransportError => "SMTP_TRANSPORT_ERROR".to_string(),
      PiggyErrorKind::UnknownEmailContentType => "UNKNOWN_EMAIL_CONTENT_TYPE".to_string(),
      PiggyErrorKind::CommentNotFound => "COMMENT_NOT_FOUND".to_string()
    }
  }
}